//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    async_graphql :: SimpleObject,
)]
#[sea_orm(table_name = "milestone")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::milestone_keyfeature::Entity")]
    MilestoneKeyfeature,
}

impl Related<super::milestone_keyfeature::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MilestoneKeyfeature.def()
    }
}

impl Related<super::key_feature::Entity> for Entity {
    fn to() -> RelationDef {
        super::milestone_keyfeature::Relation::KeyFeature.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::milestone_keyfeature::Relation::Milestone.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
